State variables:

    These variables are written to the ethereum Blockchain

DATA TYPES

1. string e.g string name = "Israel";

2. uint  -- unsigned intergers e.g uint256 = 1345;


3. int -- signed integers  e.g int256 = -1345;


4. struct -- This enables us to create a datatype with multitple properties e.g 

            struct Student{
                string name;
                uint age;
                uint studentID;
            }

5. Arrays -- there are fixed arrays of fixed length and dynamic arrays of dynamic length
        
        e.g uint[10] fixedArray;  //a variable fixedArray is assigned an array of fixed length of 10
            
            string[] studentNames;  //a variable studentNames is assigned an array of unfixed/dynamic length


FUNCTIONS

1. Function visibility
2. Function declaration



// Function visibility
Functions are public to other smart Contracts by default except they are explicitly hidden using the private keyword such as:
        
        function getNames(string[] names) private {

            return names;
        }

        // this function is hidden to other contracts 
        // don't worry about how the function behaves


// Function declaration part-1 

To create a function that accepts parameters, the datatype of the parameter must be specified

        function createStudentData(string memory name, uint age) private {

                // keep the function body empty
        }

This function expects an a string and an unsigned integer as its argument. 

To address the memory in the function declaration, note that, for reference types such as arrays, structs, mappings and strings, we need
to specify where their variables should be stored which is memory. 

Note that this doesn't apply to integers


// Function declaration part-2 (view and pure)

If a function will be changing the state of any data or variable in the contract, it mustn't be declared as view of pure 

 ------ when to declare a function as view --------

 If a function will be accessing any data or variable in the contract without changing the state, it will be declared as view

 example:  contract Students {
                
                string level = 'grade one';

                function getLevel() public view returns(string memory){
                        return level
                }

            }


            note:

            1. We access the level variable so we declared our function as view.
            2. We want it to be public, so we declared it public ---depends on you (private/public)
            3. We need to declay the return type using --returns-- key word and followed by the data type of the data to be returned
            4. Remember we spoke about memory earlier, it applies the same here

------ when to declare a function as pure --------


            contract Students {
                
                string level = 'grade one';

                function dontAccessData(number) public pure returns (string memory) {
                    return number;
                }
            }

            note:

            1. We are not accessing any data from the contract, so it is declared as pure